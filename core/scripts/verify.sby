[options]
mode prove
depth 8

[engines]
smtbmc yices

[script]
--pycode-begin--
early_log(workdir, "Verifying module: {}".format(taskname))
cells = (
    "and2",
    "demux4",
    "dff", "dffe",
    "mux2", "mux4", "mux8",
    "nand8",
    "nor2", "nor4",
    "or2", "or4",
    "xor2"
)
if taskname in cells:
    output("read -formal -sv cells/{}.sv".format(taskname))
else:
    output("read -formal -sv {}.sv".format(taskname))
output("prep -top {}".format(taskname))
--pycode-end--

[tasks]
core
memory
instruction_decode
register_file
alu
adder4
adder32
shifter
and2
nand8
mux2
mux4
mux8
demux4
dff
dffe
or2
or4
nor2
nor4
xor2
csr
fsm

[files]
verilog/core.sv
verilog/memory.sv
verilog/instruction_decode.sv
verilog/register_file.sv
verilog/alu.sv
verilog/adder4.sv
verilog/adder32.sv
verilog/shifter.sv
verilog/csr.sv
verilog/fsm.sv
constants/alu_microcode.sv verilog/constants/alu_microcode.sv
constants/fsm_control_op.sv verilog/constants/fsm_control_op.sv
constants/fsm_fault_num.sv verilog/constants/fsm_fault_num.sv
constants/mem_fault_num.sv verilog/constants/mem_fault_num.sv
constants/mem_op_size.sv verilog/constants/mem_op_size.sv
constants/stages.sv verilog/constants/stages.sv
cells/and2.sv verilog/cells/and2.sv
cells/nand8.sv verilog/cells/nand8.sv
cells/or2.sv verilog/cells/or2.sv
cells/or4.sv verilog/cells/or4.sv
cells/nor2.sv verilog/cells/nor2.sv
cells/nor4.sv verilog/cells/nor4.sv
cells/mux2.sv verilog/cells/mux2.sv
cells/mux4.sv verilog/cells/mux4.sv
cells/mux8.sv verilog/cells/mux8.sv
cells/demux4.sv verilog/cells/demux4.sv
cells/dff.sv verilog/cells/dff.sv
cells/dff_stages.sv verilog/cells/dff_stages.sv
cells/dffe.sv verilog/cells/dffe.sv
cells/xor2.sv verilog/cells/xor2.sv
cells/external_memory.sv verilog/cells/external_memory.sv
