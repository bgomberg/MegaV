library(cells) {
	cell(BUF) {
		area: 1;
		pin(A) { direction: input; }
		pin(Y) { direction: output; function: "A"; }
	}
	cell(NOT) {
		area: 1;
		pin(A) { direction: input; }
		pin(Y) { direction: output; function: "A'"; }
	}
	cell(MUX2) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(S) { direction: input; }
		pin(Y) { direction: output; function: "(A*B)+(S*B)+(S'*A)"; }
	}
	cell(XOR) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(Y) { direction: output; function: "(A*B')+(A'*B)"; }
	}
	cell(AND) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(Y) { direction: output; function: "(A*B)"; }
	}
	cell(OR) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(Y) { direction: output; function: "(A+B)"; }
	}
	cell(NAND) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(Y) { direction: output; function: "(A*B)'"; }
	}
	cell(NOR) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(Y) { direction: output; function: "(A+B)'"; }
	}
	cell(AND3) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(C) { direction: input; }
		pin(Y) { direction: output; function: "(A*B*C)"; }
	}
	cell(OR3) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(C) { direction: input; }
		pin(Y) { direction: output; function: "(A+B+C)"; }
	}
	cell(NAND3) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(C) { direction: input; }
		pin(Y) { direction: output; function: "(A*B*C)'"; }
	}
	cell(NOR3) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(C) { direction: input; }
		pin(Y) { direction: output; function: "(A+B+C)'"; }
	}
	cell(AND4) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(C) { direction: input; }
		pin(D) { direction: input; }
		pin(Y) { direction: output; function: "(A*B*C*D)"; }
	}
	cell(OR4) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(C) { direction: input; }
		pin(D) { direction: input; }
		pin(Y) { direction: output; function: "(A+B+C+D)"; }
	}
	cell(NAND4) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(C) { direction: input; }
		pin(D) { direction: input; }
		pin(Y) { direction: output; function: "(A*B*C*D)'"; }
	}
	cell(NOR4) {
		area: 2;
		pin(A) { direction: input; }
		pin(B) { direction: input; }
		pin(C) { direction: input; }
		pin(D) { direction: input; }
		pin(Y) { direction: output; function: "(A+B+C+D)'"; }
	}
	cell(D_FF) {
		area: 2;
		ff("Q") {
			next_state: "(D)";
			clocked_on: "CLK";
		}
		pin(D) { direction: input; }
		pin(CLK) { direction: input; }
		pin(Q) { direction: output; function: "Q"; }
	}
	cell(D_FF_S) {
		area: 2;
		ff("Q") {
			next_state: "(D)";
			clocked_on: "CLK";
			preset: "PREn";
		}
		pin(D) { direction: input; }
		pin(CLK) { direction: input; }
		pin(PREn) { direction: input; }
		pin(Q) { direction: output; function: "Q"; }
	}
	cell(D_FF_R) {
		area: 2;
		ff("Q") {
			next_state: "(D)";
			clocked_on: "CLK";
			clear: "CLRn";
		}
		pin(D) { direction: input; }
		pin(CLK) { direction: input; }
		pin(CLRn) { direction: input; }
		pin(Q) { direction: output; function: "Q"; }
	}
	cell(D_FF_SR) {
		area: 2;
		ff("Q") {
			next_state: "(D)";
			clocked_on: "CLK";
			preset: "PREn";
			clear: "CLRn";
		}
		pin(D) { direction: input; }
		pin(CLK) { direction: input; }
		pin(PREn) { direction: input; }
		pin(CLRn) { direction: input; }
		pin(Q) { direction: output; function: "Q"; }
	}
	cell(JK_FF) {
		area: 2;
		ff("Q") {
			next_state: "((J*Q')+(K'*Q))";
			clocked_on: "CLK";
		}
		pin(J) { direction: input; }
		pin(K) { direction: input; }
		pin(CLK) { direction: input; }
		pin(Q) { direction: output; function: "Q"; }
	}
	cell(JK_FF_C) {
		area: 2;
		ff("Q") {
			next_state: "((J*Q')+(K'*Q))";
			clocked_on: "CLK";
			clear: "CLRn";
		}
		pin(J) { direction: input; }
		pin(K) { direction: input; }
		pin(CLK) { direction: input; }
		pin(CLRn) { direction: input; }
		pin(Q) { direction: output; function: "Q"; }
	}
}
